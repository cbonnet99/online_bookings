<script type="text/javascript">

jQuery.validator.addMethod(
  "selectPhonePrefix",
  function(value, element) {
    if (element.value == "none")
    {
      return false;
    }
    else return true;
  },
  "Please select a phone prefix."
);



$(document).ready(function() {
	
	var resetClient = function(){
		$("input#client_id").val("");
		$("input#client_name").val("");
		$("select#client_phone_prefix").val("");
		$("input#client_phone_suffix").val("");
		$("input#client_email").val("");		
	};
	
	var hideClientTabs = function(calEvent){
		$("#event-fields-client-tabs").hide();
		$("ul#event-fields-client").css("background-color", "white");
		$("div#help_autocomplete_client").hide();
        makeFieldsReadonly("event-fields-client");
		if (calEvent.locked === false){
			showChangeClient();			
		}
		else{
			hideChangeClient();			
		};
	};
	
	var showClientTabs = function(){
		$("#event-fields-client-tabs").show();
		hideChangeClient();
	};
	
	var round_selected_event_tab = function(){
        var top_settings = {
                tl: { radius: 10 },
                tr: { radius: 10 },
                bl: { radius: 0 },
                br: { radius: 0 },
                antiAlias: true,
            }

        $('div.selected-event-tab').corner(top_settings);		
	};
	round_selected_event_tab();
	
   var $calendar = $('#calendar');
   var $cancelDialog = $("#event_cancel_container");
   var mylocal = '<%=  I18n.locale %>';
   I18n.locale = mylocal;

   //colors
   var eventTimeNormalColor = "#2B72D0";
   var pastEventColor = "#999";
   var eventTitleNormalColor = "#68A1E5";
   var eventTitleHoverColor = "#2B72D0";
   
   var setUpClientFields = function(){
	  if ($("#event-fields-client-tabs").is(":visible")){
	      if ($("#event-fields-client-existing").hasClass("selected-event-tab")){
		    $("#help_autocomplete_client").show();
		    $("label[for=client_name]").hide();
		  }
		  else {
		    $("#help_autocomplete_client").hide();
		    $("label[for=client_name]").show();		
		  }
		}
		else
		{
		    $("label[for=client_name]").hide();
		    $("#help_autocomplete_client").hide();			
		}
   };

    var setupEditEventFields = function(calEvent){
        if ((calEvent.confirmed_at === null) || (calEvent.confirmed_at === '') || (calEvent.confirmed_at === undefined)){
          $("#event_confirmed").hide();
        }
        else{
          $("#event_confirmed").show();
          var confirmed_date = new Date(calEvent.confirmed_at);
          $("#event_confirmed_at").html(formatDateAndTime(confirmed_date));
        };
        if (calEvent.reminder_was_sent_at !== null){
          $("#event_reminder_was_sent_at").show();
          var reminder_date = new Date(calEvent.reminder_was_sent_at);
          $("#event_reminder_was_sent_at_date").html(" "+formatDateAndTime(reminder_date)+" " + I18n.t("reminder_type_"+calEvent.reminder_was_sent_by));
          $("#event_reminder_was_sent_at").addClass(calEvent.reminder_was_sent_by);
		 }
		 else {
			$("#event_reminder_was_sent_at").hide();
		 };
        if (calEvent.reminder_will_be_sent_at !== null){
          $("#event_reminder_will_be_sent_at").show();
          var reminder_date = new Date(calEvent.reminder_will_be_sent_at);
          $("#event_reminder_will_be_sent_at_date").html(" "+formatDateAndTime(reminder_date));
		 }
		 else {
			$("#event_reminder_will_be_sent_at").hide();
		 };
        if (calEvent.needs_warning === true){
          $("#event_unconfirmed_warning").show();
        } else {
          $("#event_unconfirmed_warning").hide();	
        };
        if (calEvent.locked === true){
          $("#event_locked").show();
		  $("ul#event-fields-client").css("background-color", "white");
		  $("div#help_autocomplete_client").hide();
          makeFieldsReadonly("event-fields-client");
          hideChangeTime();
        }
        else{
          $("#event_locked").hide();
          showChangeTime();
        };
        hideClientTabs(calEvent);
    };

    var hideChangeTime = function(){
	  $("#event-fields-change-time").hide();
    };

    var showChangeTime = function(){
	  $("#event-fields-change-time").show();
    };
	
    var hideChangeClient = function(){
	  $("#event-fields-change-client").hide();
    };

    var showChangeClient = function(){
	  $("#event-fields-change-client").show();
    };
	
	var removeAutocomplete = function(){
	  $("input#client_name").autocomplete("destroy");	
	};
	
	var setupAutocomplete = function(){
        $.getJSON("/clients.json", function(data){
            $("input#client_name").autocomplete({source: data, matchContains: true, focus: function(event, ui){$("input#client_id").val(ui.item.value); $("input#client_name").val(ui.item.label); $("input#client_phone_suffix").val(ui.item.phone_suffix); $("select#client_phone_prefix").val(ui.item.phone_prefix); $("input#client_email").val(ui.item.email); return false;}, select: function(event, ui){$("input#client_id").val(ui.item.value); $("input#client_name").val(ui.item.label); $("input#client_phone_suffix").val(ui.item.phone_suffix); $("select#client_phone_prefix").val(ui.item.phone_prefix); $("input#client_email").val(ui.item.email); return false;}});
        });		
		
	};
	
    var setupBookingWindow = function(startField, endField, calEvent){
	    setupAutocomplete();
        addClientValidation();
        setupStartAndEndTimeFields(startField, endField, calEvent, $calendar.weekCalendar("getTimeslotTimes", calEvent.start));
        
		$("input#client_name").focus();
		
	}
	
	var toStringDBFormat = function(mydate) {
		minutes = mydate.getMinutes().toString();
		if (minutes.length === 1){
			minutes = "0" + minutes;
		};
		date_str = mydate.getFullYear() + '-' + (mydate.getMonth()+1) + '-' + mydate.getDate() + " " + mydate.getHours() + ":" + minutes + ":00";
		return date_str	
	};
	
	var formatDateAndTime = function(mydate) {
        var date_str = $calendar.weekCalendar("formatDate", mydate);
        var time_str = $calendar.weekCalendar("formatTime", mydate);
        return(date_str + " " + I18n.t("time_at") + " " + time_str);
		
	};
	
	var addFlashCalendar = function() {
		if ($("#flash_calendar").length == 0){
			$("<div id='flash_calendar'></div>").appendTo($("div.wc-nav"));
		}
	};

   var setHeaderIcons = function(calEvent, $event){
       if ((calEvent.end.getTime() < (new Date().getTime())) || calEvent.readOnly) {
          /* don't do anything for past events*/
       }
       else {
		  if (calEvent.state === "confirmed") {
			$event.find(".wc-time").append(" <img src='/images/confirmed.png'/>");
		  };
		  if (calEvent.needs_warning === true) {
			$event.find(".wc-time").append(" <img src='/images/unconfirmed_warning.png'/>");
		  };
       };
   };

   var updateEvent = function(calEvent, data){
         calEvent = data.booking;
		// calEvent.id = data.booking.id;
		// calEvent.title = data.booking.title;
		// calEvent.start = data.booking.start;
		// calEvent.end = data.booking.end;
		// calEvent.client_id = data.booking.client_id;
		// calEvent.client_name = data.booking.client_name;
		// calEvent.phone_prefix = data.booking.phone_prefix;
		// calEvent.phone_suffix = data.booking.phone_suffix;
		// calEvent.email = data.booking.email;
     	// $calendar.weekCalendar("updateEvent", calEvent);
        $calendar.weekCalendar("refresh");
   };

   var getNewEventValues = function(newCalEvent, start, end, client_name, client_id, phone_prefix, phone_suffix, email, booking_type_id){
       newCalEvent.start = new Date(start);
       newCalEvent.end = new Date(end);
       newCalEvent.client_id = client_id;
       newCalEvent.client_name = client_name;
       newCalEvent.phone_prefix = phone_prefix;
       newCalEvent.phone_suffix = phone_suffix;
       newCalEvent.client_email = email;
       <%if pro.has_multiple_booking_types? -%>
       newCalEvent.booking_type_id = booking_type_id;
       <% end -%>
       return newCalEvent;
   };

   var makeFieldsEditable = function(id) {
     $("#"+id).find(":input").each(
       function(i,e) {
         $(this).show();
       }
     );	
     $("#"+id).find(".read_only_label").each(
       function(i,e) {
         $(this).hide();
       }
     );
   };

   var makeFieldsReadonly = function(id) {
     $("#"+id).find(":input").each(
       function(i,e) {
         $(this).hide();
       }
     );	
     $("#"+id).find(".read_only_label").each(
       function(i,e) {
         $(this).show();
       }
     );
   };

   var addClientValidation = function() {
       $("#event_edit_form").validate(
           {rules:
              {
                 client_name: {required: true},
                 client_phone_prefix: {required: function(){ return ($("input#client_phone_suffix").val() !='')}},
                 client_phone_suffix: {required: function() {return (($("input#client_email").val() =='') && ($("input#client_phone_suffix").val() ==''))}, rangelength: [7,12]},
                 client_email: {required: function() {return (($("input#client_email").val() =='') && ($("input#client_phone_suffix").val() ==''))}, email: true}
               },
            messages:
               {
                 client_name: I18n.t("client_is_mandatory"),
                 client_phone_prefix: I18n.t("client_phone_prefix_mandatory"),
                 client_phone_suffix: I18n.t("client_phone_suffix_mandatory"),
                 client_email:
                   {
                     required: I18n.t("client_email_mandatory"),
                     email: I18n.t("client_email_invalid")
                   }
                }
             }
         );
   };

   var changeButton = function(button, html, image, color){
       button.html(html).hover(function(){
             $(this).css("background-color", "lightgrey");
           }, function(){
             $(this).css("background-color", "white");
           }
       ).css("color", color).css("font-size", "12px");

       if (image !== ''){
         button.css("padding", "5px 5px 5px 30px").css("background", "url('/images/"+image+"')").css("background-repeat", "no-repeat");
       }
       else{
         button.css("padding", "5px 5px 5px 5px");
       };

       if (color === "#090"){
         button.css("float", "right");
       }
	}

   var changeCancelButtons = function(){
     var buttonYes = $("button:contains('yes')");
     var buttonNo = $("button:contains('no')");

     changeButton(buttonYes, I18n.t("button_yes"), 'green_tick.gif', "#090");
     changeButton(buttonNo, I18n.t("button_no"), 'red_x.gif', "#C00");

   };
	
   var changeButtonColors = function(calEvent) {
     var buttonSave = $("button:contains('saveonly')");
     var buttonConfirm = $("button:contains('confirm')");
     var buttonDelete = $("button:contains('delete')");
     var buttonCancel = $("button:contains('cancel')");
     
     if ((calEvent.state === "in_grace_period") || (calEvent.state === "unconfirmed")){
       buttonConfirm.show();
       changeButton(buttonConfirm, I18n.t("button_confirm"), 'green_tick.gif', "#090");
     }
     else {
       buttonConfirm.hide();
     }

     if (calEvent.locked){
       buttonSave.hide();
     }
     else {
       buttonSave.show();
       changeButton(buttonSave, I18n.t("button_save"), '', "#090");
     };
     if (calEvent.state === "in_grace_period"){
       buttonDelete.show();
       buttonCancel.hide();
       changeButton(buttonDelete, I18n.t("button_delete"), 'red_x.gif', "#C00");
     }
     else {
       buttonDelete.hide();
       buttonCancel.show();
       changeButton(buttonCancel, I18n.t("button_cancel"), 'red_x.gif', "#C00");
     };

     $("button:contains('nosave')").html(
         I18n.t("button_nosave")).hover(function(){
             $(this).css("background-color", "lightgrey");
           }, function(){
             $(this).css("background-color", "white");
           }
     ).css("background-color", "white").css("color", "black").css("padding", "5px 5px 5px 5px").css("font-size", "12px");
	
   }
	
   var hideFlash = function() {
       $("div#flash_calendar").fadeOut(2000, function(){$(this)});
   };
   var displayFlash = function(flash) {
       if (flash.notice !== undefined && flash.notice !== '') {
           $("div#flash_calendar").html("<div id='flash_notice'>"+flash.notice+"<span id='flash_hide'>" +I18n.t("close") + "</span></div>").fadeIn(2000, function(){$(this)});
           $("#flash_hide").click(function(){hideFlash();});	
		}
		if (flash.error !== undefined && flash.error !== '') {
			$("div#flash_calendar").html("<div id='flash_error'>"+flash.error+"<span id='flash_hide'>" +I18n.t("close") + "</span></div>").fadeIn(2000, function(){$(this)});
			$("#flash_hide").click(function(){hideFlash();});
		}
	  };

   $calendar.weekCalendar({
      timeslotsPerHour : 2,
	  defaultEventLength: <%=pro.default_booking_length_in_timeslots%>,
	  timeSeparator: " <%=I18n.t(:calendar_timeSeparator)%> ",
	  alwaysDisplayTimeMinutes: false,
	  dateFormat: '<%=I18n.t(:calendar_dateformat)%>',
	  use24Hour: <%=I18n.t(:calendar_use24hour)%>,
	  timeFormat: '<%=I18n.t(:calendar_timeformat)%>',
	  removableHourSeparator: <%=I18n.t(:calendar_removableHourSeparator)%>,
      allowCalEventOverlap: false,
      overlapEventsSeparate: false,
      firstDayOfWeek: 1,
	  newEventText: I18n.t("new_appointment"),
      businessHours: {start: <%=pro.biz_hours_start%>, end: <%=pro.biz_hours_end%>, limitDisplay: true },
      daysToShow: 7,
	  buttonText: {
		today: I18n.t("today"),
		lastWeek: "< " + I18n.t("previous_week"),
		nextWeek: I18n.t("next_week") + " >"
	  },
	shortMonths : [I18n.t("Jan"), I18n.t("Feb"), I18n.t("Mar"), I18n.t("Apr"), I18n.t("May"), I18n.t("Jun"), I18n.t("Jul"), I18n.t("Aug"), I18n.t("Sep"), I18n.t("Oct"), I18n.t("Nov"), I18n.t("Dec")],
         longMonths : [ I18n.t("January"), I18n.t( "February"),  I18n.t("March"),  I18n.t("April"),  I18n.t("May"),  I18n.t("June"),  I18n.t("July"),  I18n.t("August"),  I18n.t("September"),  I18n.t("October"),  I18n.t("November"),  I18n.t("December")],
         shortDays : [I18n.t("Sun"), I18n.t("Mon"), I18n.t("Tue"), I18n.t("Wed"), I18n.t("Thu"), I18n.t("Fri"), I18n.t("Sat")],
         longDays : [I18n.t("Sunday"), I18n.t("Monday"), I18n.t("Tuesday"), I18n.t("Wednesday"), I18n.t("Thursday"), I18n.t("Friday"), I18n.t("Saturday")],
	  

      height : function($calendar) {
         return $(window).height() - $("h1").outerHeight() - 1;
      },
      eventAfterRender : function(calEvent, $event) {
        setHeaderIcons(calEvent, $event);
      },
      eventRender : function(calEvent, $event) {
        if ((calEvent.end.getTime() < (new Date().getTime())) || calEvent.readOnly) {
			$event.css("cursor", "default");
            $event.css("backgroundColor", "#aaa");
            $event.find(".wc-time").css({
               "backgroundColor" : pastEventColor,
               "border" : "1px solid #888"
            });
        }
      },
      draggable : function(calEvent, $event) {
         return false;
      },
      resizable : function(calEvent, $event) {
         // return calEvent.readOnly != true;
		return false;
      },
      eventNew : function(calEvent, $event) {
         if (calEvent.end.getTime() < new Date().getTime()) {
			$('#calendar').weekCalendar("removeUnsavedEvents");
			alert(I18n.t("sorry"));
			return false;
		 }
		 else {
			
	         var $dialogContent = $("#event_edit_container");
	         resetForm($dialogContent);
		     $("ul#event-fields-client").css("background-color", "#aaa");	         
             makeFieldsEditable("event-fields-client");
	         var startField = $dialogContent.find("select[name='start']").val(calEvent.start);
	         var endField = $dialogContent.find("select[name='end']").val(calEvent.end);
	         var clientField = $dialogContent.find("input[name='client_id']");
	         var clientFieldName = $dialogContent.find("input[name='client_name']");
	         var phonePrefix = $dialogContent.find("select[name='client_phone_prefix']");
	         var phoneSuffix = $dialogContent.find("input[name='client_phone_suffix']");
	         var clientEmail = $dialogContent.find("input[name='client_email']");
			 var bookingTypeField = $dialogContent.find("select[name='booking_type_id']");

	         $("#client_start_label").html($calendar.weekCalendar("formatTime", calEvent.start));
	         $("#client_end_label").html($calendar.weekCalendar("formatTime", calEvent.end));
			
	         $dialogContent.dialog({
	            modal: true,
				width: 500,
	            title: I18n.t("new_appointment"),
	            close: function() {
	               $dialogContent.dialog("destroy");
	               $dialogContent.hide();
	               $('#calendar').weekCalendar("removeUnsavedEvents");
	            },
	            buttons: {
	               saveonly : function() {
                      if ($("#event_edit_form").valid()) {
	                      var newCalEvent = new Object();
                          getNewEventValues(newCalEvent, startField.val(), endField.val(), clientFieldName.val(), clientField.val(), phonePrefix.val(), phoneSuffix.val(), clientEmail.val(), bookingTypeField.val());
						  $.post("<%=practitioner_bookings_url(pro)%>", {"format": "json", "booking[name]": newCalEvent.client_name, "booking[client_id]": newCalEvent.client_id<%if pro.has_multiple_booking_types? -%>, "booking[booking_type_id]": newCalEvent.booking_type_id<%end -%>, "booking[client_phone_prefix]": newCalEvent.phone_prefix, "booking[client_phone_suffix]": newCalEvent.phone_suffix, "booking[client_email]": newCalEvent.client_email, "booking[starts_str]": toStringDBFormat(newCalEvent.start), "booking[ends_str]": toStringDBFormat(newCalEvent.end)}, function(data){
                            if (data === null){
                              alert(I18n.t("sorry_server"));
                            }
                            else {
                              if ((data.flash.error === undefined) || (data.flash.error === '')) {
                                updateEvent(calEvent, data);
			                    if (data.prep) {
	                                var prepEvent = data.prep;
				                  $calendar.weekCalendar("updateEvent", prepEvent);
			                    }
                               }
			                   $calendar.weekCalendar("removeUnsavedEvents");
			                   $dialogContent.dialog("close");
			                   displayFlash(data.flash);
                           }
						}, "json");
                      }
	               },
	               nosave : function() {
	                  $dialogContent.dialog("close");
	               }
	            }
	         }).show();
             makeFieldsReadonly("event-fields-time");
             setupBookingWindow(startField, endField, calEvent);
             showChangeTime();
             showClientTabs();
             changeButtonColors(calEvent);
			 setUpClientFields();
             $("#no-cancellation").css("display", "none");			
		  }
      },
      eventDrop : function(calEvent, $event) {
		  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "PUT", "format": "json", "booking[starts_at]": calEvent.start.toString(), "booking[ends_at]": calEvent.end.toString()}, function(data){
				displayFlash(data.flash);
			}, "json");

      },
      eventResize : function(calEvent, $event) {
      },
      eventClick : function(calEvent, $event) {
         if (calEvent.readOnly) {
            return;
         }

         var $dialogContent = $("#event_edit_container");
         resetForm($dialogContent);
         var startField = $dialogContent.find("select[name='start']").val(calEvent.start);
         var endField = $dialogContent.find("select[name='end']").val(calEvent.end);
         var phonePrefix = $dialogContent.find("select[name='client_phone_prefix']").val(calEvent.phone_prefix);
         var phoneSuffix = $dialogContent.find("input[name='client_phone_suffix']").val(calEvent.phone_suffix);
         var clientEmail = $dialogContent.find("input[name='client_email']").val(calEvent.email);
		 var my_client_name = calEvent.client_name;
         var my_client_id = "";
         if (calEvent.client_id !== null){
	       my_client_id = calEvent.client_id
         }
         var clientFieldName = $dialogContent.find("input[name='client_name']").val(my_client_name);
         var clientField = $dialogContent.find("input[name='client_id']").val(my_client_id);
         var bookingTypeField = $dialogContent.find("select[name='booking_type_id']").val(calEvent.booking_type_id);

         $("#client_start_label").html($calendar.weekCalendar("formatTime", calEvent.start));
         $("#client_end_label").html($calendar.weekCalendar("formatTime", calEvent.end));
         $("#client_title_label").html(calEvent.title);
         $("#client_phone_prefix_label").html(calEvent.phone_prefix);
         $("#client_phone_suffix_label").html(calEvent.phone_suffix);
         $("#client_email_label").html(calEvent.email);
         $("#client_booking_type_label").html(calEvent.booking_type_id);
         $("#client_name_label").html(my_client_name);

         $dialogContent.dialog({
            modal: true,
			width: 500,
            title: $calendar.weekCalendar("formatDate", calEvent.start),
            close: function() {
               $dialogContent.dialog("destroy");
               $dialogContent.hide();
               $('#calendar').weekCalendar("removeUnsavedEvents");
            },
            buttons: {
               "cancel" : function() {
                  $.get("/bookings/" + calEvent.id + "/cancel_text", function(data){
                    $("textarea#cancel_cancellation_text").val(data);
                  });
                  
                  $("input#cancel_booking_id").val(calEvent.id);
				   $cancelDialog.dialog(
					{
						autoOpen: false,
						modal: true,
						width: 400,
						position: 'right',
						title: '<%=t(:cancel)%>',
						buttons:
						  {
						    "no": function(){
								$(this).dialog("close");
						    },
						    "yes": function(){
							    var booking_id = $("input#cancel_booking_id").val();
							    var send_email = $("input#cancel_send_email").val();
							    var cancellation_text = $("textarea#cancel_cancellation_text").val();
							  	$.post("/bookings/" + booking_id + "/pro_cancel", {"format": "json", "send_email": send_email, "cancellation_text": cancellation_text},
							      function(data){
				                    if (data === null){
				                      alert(I18n.t("sorry_server"));
				                    }
				                    else {
				                      if ((data.flash.error === undefined) || (data.flash.error === '')) {
							             $calendar.weekCalendar("refresh");
				                       }
									   $cancelDialog.dialog("close");				
									   $dialogContent.dialog("close");
					                   displayFlash(data.flash);
				                    }
							      }
						      , "json");
						    }
						}
					});
                  changeCancelButtons();
                  $cancelDialog.dialog("open");
               },
               nosave : function() {
                  $dialogContent.dialog("close");
               },
               "delete" : function() {	
				  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "DELETE", "format": "json"}, function(data){
					  if ((data.flash.error === undefined) || (data.flash.error === '')) {
	                    $calendar.weekCalendar("removeEvent", calEvent.id);
                        if (data.prep_id) {
	                      $calendar.weekCalendar("removeEvent", data.prep_id);
                        }
	                  }
	                  $dialogContent.dialog("close");
					  displayFlash(data.flash);
					}, "json");
               },
               saveonly : function() {
                  if ($("#event_edit_form").valid()) {
                      var newCalEvent = new Object();
                      getNewEventValues(newCalEvent, startField.val(), endField.val(), clientFieldName.val(), clientField.val(), phonePrefix.val(), phoneSuffix.val(), clientEmail.val(), bookingTypeField.val());
					  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "PUT", "format": "json", "booking[client_id]": newCalEvent.client_id<%if pro.has_multiple_booking_types? -%>, "booking[booking_type_id]": newCalEvent.booking_type_id<%end-%>, "booking[name]": newCalEvent.client_name, "booking[client_phone_prefix]": newCalEvent.phone_prefix, "booking[client_phone_suffix]": newCalEvent.phone_suffix, "booking[client_email]": newCalEvent.client_email, "booking[starts_str]": toStringDBFormat(newCalEvent.start), "booking[ends_str]": toStringDBFormat(newCalEvent.end)}, function(data){
						if ((data.flash.error === undefined) || (data.flash.error === '')) {
                          updateEvent(calEvent, data);
			             }
	                    if (data.prep) {
	                        var prepEvent = data.prep;
		                  $calendar.weekCalendar("updateEvent", prepEvent);
	                    }
			            $dialogContent.dialog("close");
	                    $dialogContent.hide();
						displayFlash(data.flash);
						}, "json");
					}
               },
               "confirm" : function() {
				  $.post("/bookings/"+calEvent.id+"/pro_confirm.json", {"format": "json"}, function(data){
					  if ((data.flash.error === undefined) || (data.flash.error === '')) {
	                    $calendar.weekCalendar("refresh");
	                  }
	                  $dialogContent.dialog("close");
					  displayFlash(data.flash);
					}, "json");
               }
            }
         }).show();
         $("input#client_name").focus();
         setupEditEventFields(calEvent);
		 setUpClientFields();
         makeFieldsReadonly("event-fields-time");
         var startField2 = $dialogContent.find("select[name='start']").val(calEvent.start);
         var endField2 = $dialogContent.find("select[name='end']").val(calEvent.end);
         setupBookingWindow(startField2, endField2, calEvent);
         $(window).resize().resize(); //fixes a bug in modal overlay size ??
         changeButtonColors(calEvent);
      },
      eventMouseover : function(calEvent, $event) {
      },
      eventMouseout : function(calEvent, $event) {
      },
	  calendarAfterLoad : function(calendar) {
		$(".wc-cal-event").hover(function(event){
			var calEvent = $(event.target).data("calEvent");
			if (calEvent === null){
				var calEvent = $(event.target).parent().data("calEvent");
			}
			if ((calEvent !== null) && (calEvent.end.getTime() > (new Date().getTime())) && !calEvent.readOnly) {
			   $(this).css("background-color", eventTitleHoverColor);
			}
		},
		function(event){
			var $target = $(event.target);
			var calEvent = $target.data("calEvent");
			if (calEvent === null){
				var calEvent = $(event.target).parent().data("calEvent");
			}
			if ((calEvent !== null) && (calEvent.end.getTime() > (new Date().getTime())) && !calEvent.readOnly) {
			   $(this).css("background-color", eventTitleNormalColor);
			}			
		}
		);
	  },
      noEvents : function() {

      },
      data : function(start, end, callback) {
		$.getJSON("/practitioners/<%=pro.permalink%>/bookings.json", 
		                  { 
		                     start: start.getTime()/1000, 
		                     end: end.getTime()/1000 
		                  }, 
		                  function(result) {
			                 addFlashCalendar(); 
		                     callback(result); 
		                  });
      }
   });

   function resetForm($dialogContent) {
      $dialogContent.find("input").val("").removeClass("error");
      $dialogContent.find("select").val("").removeClass("error");
      $dialogContent.find("textarea").val("").removeClass("error");
      $dialogContent.find("label.error").remove();
      $("#event_edit_container ul.event-icons li").each(
        function(i, e){
          $(this).hide();
        }
      );
   }

   /*
    * Sets up the start and end time fields in the calendar event
    * form for editing based on the calendar event being edited
    */
   function setupStartAndEndTimeFields($startTimeField, $endTimeField, calEvent, timeslotTimes) {
      $("select[name=start]").children().remove();
      $("select[name=end]").children().remove();
      for (var i = 0; i < timeslotTimes.length; i++) {
         var startTime = timeslotTimes[i].start;
         var endTime = timeslotTimes[i].end;
         var startSelected = "";
		 if (Math.round(startTime.getTime()/1000) === Math.round(calEvent.start.getTime()/1000)) {
            startSelected = "selected=\"selected\"";
         }
         var endSelected = "";
         if (Math.round(endTime.getTime()/1000) === Math.round(calEvent.end.getTime()/1000)) {
            endSelected = "selected=\"selected\"";
         }
         $startTimeField.append("<option value=\"" + startTime + "\" " + startSelected + ">" + timeslotTimes[i].startFormatted + "</option>");
         $endTimeField.append("<option value=\"" + endTime + "\" " + endSelected + ">" + timeslotTimes[i].endFormatted + "</option>");

      }
      $endTimeOptions = $endTimeField.find("option");
      $startTimeField.trigger("change");
   }

   $("input#cancel_send_email").change(function(){
       if ($(this).attr("checked")) {
           $("textarea#cancel_cancellation_text").show();
       }
       else {
           $("textarea#cancel_cancellation_text").hide();            
       }
   })
   
	$("select[name='booking_type_id']").change(function(){
		var currentDiffMillis = new Date($("select[name='end']").val()).getTime() - new Date($("select[name='start']").val()).getTime();
		var booking_type_id = $("select[name='booking_type_id']").val();
	});
	
	$("div#event-fields-change-time").click(function(event){
	   $(this).hide();
	   makeFieldsEditable("event-fields-time");
	   event.preventDefault();
	});
		
	$("div#event-fields-change-client").click(function(event){
	   $(this).hide();
	   $("ul#event-fields-client").css("background-color", "#aaa");
	   resetClient();
       makeFieldsEditable("event-fields-client");
       showClientTabs();
	   event.preventDefault();
	});
		
	$("div#event-fields-client-new").click(function(event){
		$("div#event-fields-client-existing").removeClass("selected-event-tab");
		$("div#help_autocomplete_client").hide();
		$("label[for=client_name]").show();
		$(this).addClass("selected-event-tab");
		round_selected_event_tab();
		resetClient();
		removeAutocomplete();
	});

	$("div#event-fields-client-existing").click(function(event){
		$("div#event-fields-client-new").removeClass("selected-event-tab");
		$("div#help_autocomplete_client").show();
		$("label[for=client_name]").hide();
		$(this).addClass("selected-event-tab");
		resetClient();
		round_selected_event_tab();
		setupAutocomplete();
	});


});

</script><% title pro.calendar_title%>
<div id="calendar"></div>

<div id="event_edit_container">	
	<form id="event_edit_form"> 
		<ul class="event-icons">
			<li id="event_reminder_will_be_sent_at"><%= t(:reminder_will_be_sent_at, :scope => [:event_window])%><span id="event_reminder_will_be_sent_at_date"></span></li>
			<li id="event_reminder_was_sent_at"><%= t(:reminder_was_sent_at, :scope => [:event_window])%><span id="event_reminder_was_sent_at_date"></span></li>
			<li id="event_confirmed"><%= t(:confirmed, :scope => [:event_window])%> <span id="event_confirmed_at"></span></li>
			<li id="event_unconfirmed_warning"><%= t(:unconfirmed_warning, :scope => [:event_window])%></li>
			<li id="event_locked"><%= t(:locked, :scope => [:event_window])%> <span class="explanation_link" id="event_locked_explanation_link" padding_height="0">[<%= t(:event_locked_explanation_link)%>]</span><div id="event_locked_explanation" class="explanation rounded"><%= t(:event_locked_explanation)%><br/><span id="event_locked_explanation_close" class="explanation_close"><%= t(:close_explanation)%></span></div></li>			
		</ul>
		<fieldset>
			<legend><%= t(:label_booking_time)%></legend>
		<ul class="event-fields" id="event-fields-time"> 
				<% if pro.has_multiple_booking_types? -%>
				<li> 
				<label for="booking_type_id"><%= t(:appointment_booking_type)%></label><br/><label id="client_booking_type_label" class="read_only_label"></label><select name="booking_type_id"><%= current_pro_booking_type_options(current_pro)-%></select>
			</li> 
				<%end -%>
			<li> 
				<div id="event-fields-time-left"><label for="start"><%= t(:appointment_start_time)%></label> <label id="client_start_label" class="read_only_label"></label><select name="start"><option value="">Select</option></select>
				<label for="end"><%= t(:appointment_end_time)%></label> <label id="client_end_label" class="read_only_label"></label><select name="end"><option value="">Select End Time</option></select></div><div id="event-fields-change-time"><%= t(:appointment_change_time)%></div><div class="cleaner"></div>
			</li> 
		</ul>
		</fieldset>
		<fieldset>
			<legend><%= t(:appointment_client)%></legend>
            <div id="event-fields-change-client"><%= t(:appointment_change_client)%></div><div class="cleaner"></div>
			<div id="event-fields-client-tabs">
				<div id="event-fields-client-existing" class="event-fields-client-selector selected-event-tab"><%= t(:appointment_existing_client)%></div>
				<div id="event-fields-client-new" class="event-fields-client-selector"><%= t(:appointment_new_client)%></div>
			</div>
			<div class="cleaner"></div>
		<ul class="event-fields" id="event-fields-client"> 
				<li>
					<label for="client_name"><%= t(:appointment_client_name)%>:<br/></label>
					<div class="help" id="help_autocomplete_client"><%= t(:help_autocomplete_client)%></div> 
				<label id="client_name_label" class="read_only_label"></label><input id="client_id" type="hidden" name="client_id"></input><input id="client_name" type="text" name="client_name" size="30"></input>
			</li>
			<li> 
				<label for="phone"><%= t(:appointment_phone)%>:</label><br/><label id="client_phone_prefix_label" class="read_only_label"></label><select id="client_phone_prefix" name="client_phone_prefix"><%= current_pro_phone_prefixes_options(pro)-%></select><label id="client_phone_suffix_label" class="read_only_label"></label><input id="client_phone_suffix" type="text" name="client_phone_suffix" size="10" maxlength="10"></input>
			</li> 
			<li> 
				<label for="email"><%= t(:appointment_email)%>:</label><br/><label id="client_email_label" class="read_only_label"></label><input id="client_email" type="text" name="client_email" size="30"></input>
			</li>
		</ul> 
	</fieldset>
	</form> 
</div>

<div id="event_cancel_container" style="display: none">	
  <form id="event_cancel_form">
	<p><%=t(:cancel_warning_text)%></p>
	<input type="hidden" id="cancel_booking_id"></input>
	<input type="checkbox" id="cancel_send_email" name="send_email" checked="true"></input><label for="cancel_send_email"><%= t(:cancel_send_email)%></label><br/>
	<textarea id="cancel_cancellation_text" name="cancellation_text" cols="35" rows="15"></textarea>
  </form>
</div>