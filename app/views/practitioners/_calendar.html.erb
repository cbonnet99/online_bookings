<script type="text/javascript">

jQuery.validator.addMethod(
  "selectPhonePrefix",
  function(value, element) {
    if (element.value == "none")
    {
      return false;
    }
    else return true;
  },
  "Please select a phone prefix."
);

$(document).ready(function() {

   var $calendar = $('#calendar');
   var mylocal = '<%=  I18n.locale %>' ;
   I18n.locale = mylocal;
   var id = 10;
	
   //colors
   var eventTimeNormalColor = "#2B72D0";
   var pastEventColor = "#999";
   var eventTitleNormalColor = "#68A1E5";
   var eventTitleHoverColor = "#2B72D0";

   var addClientValidation = function() {
       $("#event_edit_form").validate(
           {rules:
              {
                 client_name: {required: true},
                 client_phone_prefix: {required: function(){ return ($("input#client_phone_suffix").val() !='')}},
                 client_phone_suffix: {required: function() {return (($("input#client_email").val() =='') && ($("input#client_phone_suffix").val() ==''))}, rangelength: [7,12]},
                 client_email: {required: function() {return (($("input#client_email").val() =='') && ($("input#client_phone_suffix").val() ==''))}, email: true}
               },
            messages:
               {
                 client_name: I18n.t("client_is_mandatory"),
                 client_phone_prefix: I18n.t("client_phone_prefix_mandatory"),
                 client_phone_suffix: I18n.t("client_phone_suffix_mandatory"),
                 client_email:
                   {
                     required: I18n.t("client_email_mandatory"),
                     email: I18n.t("client_email_invalid")
                   }
                }
             }
         );
   };

   var changeButtonColors = function() {
       $("button:contains('save')").html(I18n.t("button_save")).hover(function(){$(this).css("background-color", "lightgrey");}, function(){$(this).css("background-color", "white");}).css("color", "#090").css("background", "url('/images/green_tick.gif')").css("background-repeat", "no-repeat").css("padding", "5px 5px 5px 30px").css("font-size", "12px");
       $("button:contains('delete')").html(I18n.t("button_delete")).hover(function(){$(this).css("background-color", "lightgrey");}, function(){$(this).css("background-color", "white");}).css("background", "url('/images/red_x.gif')").css("background-repeat", "no-repeat").css("color", "#C00").css("padding", "5px 5px 5px 30px").css("font-size", "12px");
       $("button:contains('cancel')").html(I18n.t("button_nosave")).hover(function(){$(this).css("background-color", "lightgrey");}, function(){$(this).css("background-color", "white");}).css("background-color", "white").css("color", "black").css("padding", "5px 5px 5px 5px").css("font-size", "12px");
	
   }
	
   var hideFlash = function() {
       $("div#flash_calendar").fadeOut(2000, function(){$(this)});
   };
   var displayFlash = function(flash) {
       if (flash.notice !== undefined && flash.notice !== '') {
           $("div#flash_calendar").html("<div id='flash_notice'>"+flash.notice+"<span id='flash_hide'>" +I18n.t("close") + "</span></div>").fadeIn(2000, function(){$(this)});
           $("#flash_hide").click(function(){hideFlash();});	
		}
		if (flash.error !== undefined && flash.error !== '') {
			$("div#flash_calendar").html("<div id='flash_error'>"+flash.error+"<span id='flash_hide'>" +I18n.t("close") + "</span></div>").fadeIn(2000, function(){$(this)});
			$("#flash_hide").click(function(){hideFlash();});
		}
	  };

   $calendar.weekCalendar({
      timeslotsPerHour : 2,
	  defaultEventLength: <%=pro.default_booking_length_in_timeslots%>,
	  timeSeparator: " <%=I18n.t(:calendar_timeSeparator)%> ",
	  alwaysDisplayTimeMinutes: false,
	  dateFormat: '<%=I18n.t(:calendar_dateformat)%>',
	  use24Hour: <%=I18n.t(:calendar_use24hour)%>,
	  timeFormat: '<%=I18n.t(:calendar_timeformat)%>',
	  removableHourSeparator: <%=I18n.t(:calendar_removableHourSeparator)%>,
      allowCalEventOverlap: false,
      overlapEventsSeparate: false,
      firstDayOfWeek: 1,
	  newEventText: I18n.t("new_appointment"),
      businessHours: {start: <%=pro.biz_hours_start%>, end: <%=pro.biz_hours_end%>, limitDisplay: true },
      daysToShow: 7,
	  buttonText: {
		today: I18n.t("today"),
		lastWeek: "<",
		nextWeek: ">"
	  },
	shortMonths : [I18n.t("Jan"), I18n.t("Feb"), I18n.t("Mar"), I18n.t("Apr"), I18n.t("May"), I18n.t("Jun"), I18n.t("Jul"), I18n.t("Aug"), I18n.t("Sep"), I18n.t("Oct"), I18n.t("Nov"), I18n.t("Dec")],
         longMonths : [ I18n.t("January"), I18n.t( "February"),  I18n.t("March"),  I18n.t("April"),  I18n.t("May"),  I18n.t("June"),  I18n.t("July"),  I18n.t("August"),  I18n.t("September"),  I18n.t("October"),  I18n.t("November"),  I18n.t("December")],
         shortDays : [I18n.t("Sun"), I18n.t("Mon"), I18n.t("Tue"), I18n.t("Wed"), I18n.t("Thu"), I18n.t("Fri"), I18n.t("Sat")],
         longDays : [I18n.t("Sunday"), I18n.t("Monday"), I18n.t("Tuesday"), I18n.t("Wednesday"), I18n.t("Thursday"), I18n.t("Friday"), I18n.t("Saturday")],
	  

      height : function($calendar) {
         return $(window).height() - $("h1").outerHeight() - 1;
      },
      eventAfterRender : function(calEvent, $event) {
        if ((calEvent.end.getTime() < (new Date().getTime())) || calEvent.readOnly) {
           /* don't do anything for past events*/
        }
        else {
		  if (calEvent.state === "confirmed") {
			$event.find(".wc-time").append(" <img src='/images/confirmed-small.jpg'/>");
		  };
		  if (calEvent.needs_warning === true) {
			$event.find(".wc-time").append(" <img src='/images/unconfirmed_warning.png'/>");
		  }
        }
      },
      eventRender : function(calEvent, $event) {
        if ((calEvent.end.getTime() < (new Date().getTime())) || calEvent.readOnly) {
			$event.css("cursor", "default");
            $event.css("backgroundColor", "#aaa");
            $event.find(".wc-time").css({
               "backgroundColor" : pastEventColor,
               "border" : "1px solid #888"
            });
        }
      },
      draggable : function(calEvent, $event) {
         return false;
      },
      resizable : function(calEvent, $event) {
         // return calEvent.readOnly != true;
		return false;
      },
      eventNew : function(calEvent, $event) {
         if (calEvent.end.getTime() < new Date().getTime()) {
			$('#calendar').weekCalendar("removeUnsavedEvents"); 
			alert(I18n.t("sorry"));
			return false;
		 }
		 else {
			
	         var $dialogContent = $("#event_edit_container");
	         resetForm($dialogContent);
	         var startField = $dialogContent.find("select[name='start']").val(calEvent.start);
	         var endField = $dialogContent.find("select[name='end']").val(calEvent.end);
	         var titleField = $dialogContent.find("input[name='title']").val('<%=current_client.try(:name)%>');
	         var bodyField = $dialogContent.find("textarea[name='body']");
	         var clientField = $dialogContent.find("input[name='client_id']");
	         var clientFieldName = $dialogContent.find("input[name='client_name']");
	         var phonePrefix = $dialogContent.find("select[name='client_phone_prefix']");
	         var phoneSuffix = $dialogContent.find("input[name='client_phone_suffix']");
	         var clientEmail = $dialogContent.find("input[name='client_email']");
			 <%if pro.has_multiple_booking_types? -%>
			 var bookingTypeField = $dialogContent.find("select[name='booking_type_id']");
			 <%end -%>
			
			if ($dialogContent.find("input[name='title']").is(":visible")) {
				//retrieve current client name
				$.get("<%=client_name_url%>", {"format": "json"}, function(data){
					$dialogContent.find("input[name='title']").val(data.name);
				}, "json");
			}

	         $dialogContent.dialog({
	            modal: true,
	            title: I18n.t("new_appointment"),
	            close: function() {
	               $dialogContent.dialog("destroy");
	               $dialogContent.hide();
	               $('#calendar').weekCalendar("removeUnsavedEvents");
	            },
	            buttons: {
	               save : function() {
                      if ($("#event_edit_form").valid()) {
		                  new_start = new Date(startField.val());
		                  new_end = new Date(endField.val());
		                  new_title = titleField.val();
		                  new_body = bodyField.val();
						  new_client_id = clientField.val();
                          new_phone_prefix = phonePrefix.val();
                          new_phone_suffix = phoneSuffix.val();
                          new_client_email = clientEmail.val();
						  <%if pro.has_multiple_booking_types? -%>
						  new_booking_type_id = bookingTypeField.val();
						  <% end -%>
						  $.post("<%=practitioner_bookings_url(pro)%>", {"format": "json", "booking[name]": new_title, "booking[client_id]": new_client_id<%if pro.has_multiple_booking_types? -%>, "booking[booking_type_id]": new_booking_type_id<%end -%>, "booking[comment]": new_body, "booking[client_phone_prefix]": new_phone_prefix, "booking[client_phone_suffix]": new_phone_suffix, "booking[client_email]": new_client_email, "booking[starts_at]": new_start.toString(), "booking[ends_at]": new_end.toString()}, function(data){
							if ((data.flash.error === undefined) || (data.flash.error === '')) {
								calEvent.id = data.booking.id;
								calEvent.title = data.booking.title;
								calEvent.start = data.booking.start;
								calEvent.end = data.booking.end;
								calEvent.client_id = data.booking.client_id;
								calEvent.client_name = data.booking.client_name;
								calEvent.phone_prefix = data.booking.phone_prefix;
								calEvent.phone_suffix = data.booking.phone_suffix;
								calEvent.email = data.booking.email;
			                  	$calendar.weekCalendar("updateEvent", calEvent);
			                    if (data.prep) {
	                                var prepEvent = data.prep;
				                  $calendar.weekCalendar("updateEvent", prepEvent);
			                    }
			                 }
			                 $calendar.weekCalendar("removeUnsavedEvents");
			                 $dialogContent.dialog("close");
			                 displayFlash(data.flash);
							}, "json");
                      }
	               },
	               cancel : function() {
	                  $dialogContent.dialog("close");
	               }
	            }
	         }).show();
             addClientValidation();
             $("input#client_name").autocomplete({source: clients_data, matchContains: true, focus: function(event, ui){$("input#client_id").val(ui.item.value); $("input#client_name").val(ui.item.label); $("input#client_phone_suffix").val(ui.item.phone_suffix); $("select#client_phone_prefix").val(ui.item.phone_prefix); $("input#client_email").val(ui.item.email); return false;}, select: function(event, ui){$("input#client_id").val(ui.item.value); $("input#client_name").val(ui.item.label); $("input#client_phone_suffix").val(ui.item.phone_suffix); $("select#client_phone_prefix").val(ui.item.phone_prefix); $("input#client_email").val(ui.item.email); return false;}});
			$("input#client_name").focus();
			

			<% if own_calendar?(pro, current_pro)-%>
	         setupStartAndEndTimeFields(startField, endField, calEvent, $calendar.weekCalendar("getTimeslotTimes", calEvent.start));
			<% end -%>
         changeButtonColors();
         $("#no-cancellation").css("display", "none");			
		  }
      },
      eventDrop : function(calEvent, $event) {
		  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "PUT", "format": "json", "booking[starts_at]": calEvent.start.toString(), "booking[ends_at]": calEvent.end.toString()}, function(data){
				displayFlash(data.flash);
			}, "json");

      },
      eventResize : function(calEvent, $event) {
      },
      eventClick : function(calEvent, $event) {
         if (calEvent.readOnly) {
            return;
         }

         var $dialogContent = $("#event_edit_container");
         resetForm($dialogContent);
         var startField = $dialogContent.find("select[name='start']").val(calEvent.start);
         var endField = $dialogContent.find("select[name='end']").val(calEvent.end);
         var titleField = $dialogContent.find("input[name='title']").val(calEvent.title);
         var bodyField = $dialogContent.find("textarea[name='body']");
         var phonePrefix = $dialogContent.find("select[name='client_phone_prefix']").val(calEvent.phone_prefix);
         var phoneSuffix = $dialogContent.find("input[name='client_phone_suffix']").val(calEvent.phone_suffix);
         var clientEmail = $dialogContent.find("input[name='client_email']").val(calEvent.email);
		 var my_client_name = calEvent.client_name;
         var my_client_id = "";
         if (calEvent.client_id !== null){
	       my_client_id = calEvent.client_id
         }
         var clientFieldName = $dialogContent.find("input[name='client_name']").val(my_client_name);
         var clientField = $dialogContent.find("input[name='client_id']").val(my_client_id);
         <%if pro.has_multiple_booking_types? -%>
         var bookingTypeField = $dialogContent.find("select[name='booking_type_id']").val(calEvent.booking_type_id);
         <%end -%>
         bodyField.val(calEvent.body);
         $dialogContent.dialog({
            modal: true,
            title: $calendar.weekCalendar("formatDate", calEvent.start),
            close: function() {
               $dialogContent.dialog("destroy");
               $dialogContent.hide();
               $('#calendar').weekCalendar("removeUnsavedEvents");
            },
            buttons: {
               save : function() {
                  if ($("#event_edit_form").valid()) {
	                  new_start = new Date(startField.val());
	                  new_end = new Date(endField.val());
	                  if (titleField) {new_title = titleField.val()} else {new_title = ""}
	                  new_body = bodyField.val();
					  new_client_id = clientField.val();
					  new_client_name = clientFieldName.val();
                      new_phone_prefix = phonePrefix.val();
                      new_phone_suffix = phoneSuffix.val();
                      new_client_email = clientEmail.val();
					  <%if pro.has_multiple_booking_types? -%>
					  new_booking_type_id = bookingTypeField.val();
					  <% end -%>
					  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "PUT", "format": "json", "booking[client_id]": new_client_id<%if pro.has_multiple_booking_types? -%>, "booking[booking_type_id]": new_booking_type_id<%end-%>, "booking[name]": new_title, "booking[client_phone_prefix]": new_phone_prefix, "booking[client_phone_suffix]": new_phone_suffix, "booking[client_email]": new_client_email, "booking[comment]": new_body, "booking[starts_at]": new_start.toString(), "booking[ends_at]": new_end.toString()}, function(data){
						if ((data.flash.error === undefined) || (data.flash.error === '')) {
							calEvent.id = data.booking.id;
							calEvent.title = data.booking.title;
							calEvent.start = data.booking.start;
							calEvent.end = data.booking.end;
							calEvent.client_id = data.booking.client_id;
							calEvent.client_name = data.booking.client_name;
							calEvent.email = data.booking.email;
							calEvent.phone_prefix = data.booking.phone_prefix;
							calEvent.phone_suffix = data.booking.phone_suffix;
			                $calendar.weekCalendar("updateEvent", calEvent);
			             }
	                    if (data.prep) {
	                        var prepEvent = data.prep;
		                  $calendar.weekCalendar("updateEvent", prepEvent);
	                    }
			            $dialogContent.dialog("close");
	                    $dialogContent.hide();
						displayFlash(data.flash);
						}, "json");
					}
               },
               cancel : function() {
                  $dialogContent.dialog("close");
               },
               "delete" : function() {
	
				  $.post("/practitioners/<%=pro.permalink%>/bookings/"+calEvent.id+".json", {"_method": "DELETE", "format": "json"}, function(data){
					  if ((data.flash.error === undefined) || (data.flash.error === '')) {
	                    $calendar.weekCalendar("removeEvent", calEvent.id);
                        if (data.prep_id) {
	                      $calendar.weekCalendar("removeEvent", data.prep_id);
                        }
	                  }
	                  $dialogContent.dialog("close");
					  displayFlash(data.flash);
					}, "json");
               }
            }
         }).show();
         addClientValidation();
         $("input#client_name").autocomplete({source: clients_data, matchContains: true, focus: function(event, ui){$("input#client_id").val(ui.item.value);
         $("input#client_name").val(ui.item.label);
         $("input#client_phone_suffix").val(ui.item.phone_suffix);
         $("select#client_phone_prefix").val(ui.item.phone_prefix);
         $("input#client_email").val(ui.item.email); return false;}, select: function(event, ui){$("input#client_id").val(ui.item.value); $("input#client_name").val(ui.item.label);
         $("input#client_phone_suffix").val(ui.item.phone_suffix);
         $("select#client_phone_prefix").val(ui.item.phone_prefix);
         $("input#client_email").val(ui.item.email); return false;}});
         $("input#client_name").focus();

         if ((calEvent.confirmed_at === null) || (calEvent.confirmed_at === '')){
           $("#event_confirmed").hide();
         }
         else{
           $("#event_confirmed").show();
           $("#event_confirmed_at").html(calEvent.confirmed_at);
         };
         if (calEvent.needs_warning === true){
           $("#event_unconfirmed_warning").show();
         } else {
           $("#event_unconfirmed_warning").hide();	
         };
         if (calEvent.locked === true){
           $("#event_locked").show();
         }
         else{
           $("#event_locked").hide();
         }

         var startField2 = $dialogContent.find("select[name='start']").val(calEvent.start);
         var endField2 = $dialogContent.find("select[name='end']").val(calEvent.end);
         setupStartAndEndTimeFields(startField2, endField2, calEvent, 	$calendar.weekCalendar("getTimeslotTimes", calEvent.start));
         $(window).resize().resize(); //fixes a bug in modal overlay size ??
         changeButtonColors();
      },
      eventMouseover : function(calEvent, $event) {
      },
      eventMouseout : function(calEvent, $event) {
      },
	  calendarAfterLoad : function(calendar) {
		$(".wc-cal-event").hover(function(event){
			var calEvent = $(event.target).data("calEvent");
			if (calEvent === null){
				var calEvent = $(event.target).parent().data("calEvent");
			}
			if ((calEvent !== null) && (calEvent.end.getTime() > (new Date().getTime())) && !calEvent.readOnly) {
			   $(this).css("background-color", eventTitleHoverColor);
			}
		},
		function(event){
			var $target = $(event.target);
			var calEvent = $target.data("calEvent");
			if (calEvent === null){
				var calEvent = $(event.target).parent().data("calEvent");
			}
			if ((calEvent !== null) && (calEvent.end.getTime() > (new Date().getTime())) && !calEvent.readOnly) {
			   $(this).css("background-color", eventTitleNormalColor);
			}			
		}
		);
	  },
      noEvents : function() {

      },
      data : function(start, end, callback) {
		$.getJSON("/practitioners/<%=pro.permalink%>/bookings.json", 
		                  { 
		                     start: start.getTime()/1000, 
		                     end: end.getTime()/1000 
		                  }, 
		                  function(result) {
			                 addFlashCalendar(); 
		                     callback(result); 
		                  });
      }
   });

   function resetForm($dialogContent) {
      $dialogContent.find("input").val("").removeClass("error");
      $dialogContent.find("select").val("").removeClass("error");
      $dialogContent.find("textarea").val("").removeClass("error");
      $dialogContent.find("label.error").remove();
   }

   /*
    * Sets up the start and end time fields in the calendar event
    * form for editing based on the calendar event being edited
    */
   function setupStartAndEndTimeFields($startTimeField, $endTimeField, calEvent, timeslotTimes) {

      for (var i = 0; i < timeslotTimes.length; i++) {
         var startTime = timeslotTimes[i].start;
         var endTime = timeslotTimes[i].end;
         var startSelected = "";
		 if (Math.round(startTime.getTime()/1000) === Math.round(calEvent.start.getTime()/1000)) {
            startSelected = "selected=\"selected\"";
         }
         var endSelected = "";
         if (Math.round(endTime.getTime()/1000) === Math.round(calEvent.end.getTime()/1000)) {
            endSelected = "selected=\"selected\"";
         }
         $startTimeField.append("<option value=\"" + startTime + "\" " + startSelected + ">" + timeslotTimes[i].startFormatted + "</option>");
         $endTimeField.append("<option value=\"" + endTime + "\" " + endSelected + ">" + timeslotTimes[i].endFormatted + "</option>");

      }
      $endTimeOptions = $endTimeField.find("option");
      $startTimeField.trigger("change");
   }

   var $endTimeField = $("select[name='end']");
   var $endTimeOptions = $endTimeField.find("option");

   //reduces the end time options to be only after the start time options.
   $("select[name='start']").change(function() {
      var startTime = $(this).find(":selected").val();
      var currentEndTime = $endTimeField.find("option:selected").val();
      $endTimeField.html(
            $endTimeOptions.filter(function() {
               return startTime < $(this).val();
            })
      );

      var endTimeSelected = false;
      $endTimeField.find("option").each(function() {
         if ($(this).val() === currentEndTime) {
            $(this).attr("selected", "selected");
            endTimeSelected = true;
            return false;
         }
      });

      if (!endTimeSelected) {
         //automatically select an end date 2 slots away.
         $endTimeField.find("option:eq(1)").attr("selected", "selected");
      }

   });


   var $about = $("#about");

   $("#about_button").click(function() {
      $about.dialog({
         title: "About this calendar demo",
         width: 600,
         close: function() {
            $about.dialog("destroy");
            $about.hide();
         },
         buttons: {
            close : function() {
               $about.dialog("close");
            }
         }
      }).show();
   });


});
</script><% title pro.calendar_title%>
<div id="calendar"></div>
<div id="event_edit_container">	
	<form id="event_edit_form"> 
		<ul class="event-icons">
			<li id="event_confirmed"><%= t(:confirmed, :scope => [:event_window])%> <span id="event_confirmed_at">bla</span></li>
			<li id="event_unconfirmed_warning"><%= t(:unconfirmed_warning, :scope => [:event_window])%></li>
			<li id="event_locked"><%= t(:locked, :scope => [:event_window])%></li>			
		</ul>
		<ul class="event-fields"> 
			<li> 
				<label for="start"><%= t(:appointment_start_time)%></label><select name="start"><option value="">Select</option></select>
				<label for="end"><%= t(:appointment_end_time)%></label><select name="end"><option value="">Select End Time</option></select> 
			</li> 
			<li> 
				<% if pro.has_multiple_booking_types? -%>
				<label for="booking_type_id"><%= t(:appointment_booking_type)%></label><select name="booking_type_id"><%= current_pro_booking_type_options(current_pro)-%></select>
			</li> 
			<li> 
				<%end -%>
				<label for="title"><%= t(:appointment_client)%></label><input id="client_id" type="hidden" name="client_id"></input><input id="client_name" type="text" name="client_name"></input>
			</li> 
			<li> 
				<label for="phone"><%= t(:appointment_phone)%>:</label><select id="client_phone_prefix" name="client_phone_prefix"><%= current_pro_phone_prefixes_options(pro)-%></select><input id="client_phone_suffix" type="text" name="client_phone_suffix" size="12"></input>
			</li> 
			<li> 
				<label for="email"><%= t(:appointment_email)%>:</label><input id="client_email" type="text" name="client_email" size="20"></input>
			</li>
			<li> 
				<label for="body" style="display: none"><%= t(:appointment_comment)%></label><textarea name="body" style="display: none"></textarea> 
			</li> 
		</ul> 
	</form> 
</div>